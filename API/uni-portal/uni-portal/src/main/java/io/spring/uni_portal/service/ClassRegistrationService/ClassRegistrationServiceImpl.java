package io.spring.uni_portal.service.ClassRegistrationService;

import io.spring.uni_portal.dto.ClassSubjectStudent.ClassSubjectStudentDTO;
import io.spring.uni_portal.dto.ClassSubjectStudent.RegisterClassRequestDTO;
import io.spring.uni_portal.dto.ClassSubjectStudent.RegisteredClassDTO;
import io.spring.uni_portal.dto.ClassSubjectStudent.UnregisterClassRequestDTO;
import io.spring.uni_portal.model.*;
import io.spring.uni_portal.repository.*;
import io.spring.uni_portal.response.Response;
import io.spring.uni_portal.security.JwtService;
import io.spring.uni_portal.service.ClassStudentService.IClassStudentService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ClassRegistrationServiceImpl implements IClassRegistrationService  {
    @Autowired
    private ClassStudentRepository classStudentRepo;

    @Autowired
    private ClassSubjectStudentRepository classSubjectRepo;

    @Autowired
    private AttendanceSessionRepository attendanceSessionRepo;

    @Autowired
    private AttendanceRepository attendanceRepo;

    @Autowired
    private StudentRepository studentRepository;

    @Autowired
    private StudentRegistrationPeriodRepository studentRegistrationPeriodRepository;

    @Override
    @Transactional
    public ClassSubjectStudentDTO registerStudentToClass(RegisterClassRequestDTO dto) {
        // üîê Check th·ªùi gian ƒëƒÉng k√Ω sinh vi√™n h·ª£p l·ªá
        LocalDateTime now = LocalDateTime.now();
        StudentRegistrationPeriod currentPeriod = studentRegistrationPeriodRepository.findActivePeriod(now)
                .orElseThrow(() -> new IllegalStateException("Hi·ªán t·∫°i kh√¥ng c√≥ ƒë·ª£t ƒëƒÉng k√Ω sinh vi√™n n√†o ƒëang m·ªü"));

        if (now.isBefore(currentPeriod.getStartDate()) || now.isAfter(currentPeriod.getEndDate())) {
            throw new IllegalStateException(String.format(
                    "ƒêƒÉng k√Ω l·ªõp ch·ªâ ƒë∆∞·ª£c th·ª±c hi·ªán trong kho·∫£ng t·ª´ %s ƒë·∫øn %s",
                    currentPeriod.getStartDate(), currentPeriod.getEndDate()
            ));
        }

        // X√°c th·ª±c ng∆∞·ªùi d√πng
        UsernamePasswordAuthenticationToken authentication =
                (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();

        if (authentication == null || !(authentication.getPrincipal() instanceof User)) {
            throw new RuntimeException("Ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c ho·∫∑c token kh√¥ng h·ª£p l·ªá.");
        }

        User currentUser = (User) authentication.getPrincipal();

        Student student = studentRepository.findById(currentUser.getUserId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y sinh vi√™n."));

        ClassStudent classStudent = classStudentRepo.findById(dto.getClassStudentId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc."));

        // Ki·ªÉm tra tr√πng l·ªõp h·ªçc c·ª• th·ªÉ
        boolean exists = classSubjectRepo.existsByClassStudent_ClassStudentIdAndStudent_UserId(
                dto.getClassStudentId(), student.getUserId());
        if (exists) {
            throw new IllegalStateException("Sinh vi√™n ƒë√£ ƒëƒÉng k√Ω l·ªõp h·ªçc n√†y r·ªìi.");
        }

        // Ki·ªÉm tra xem sinh vi√™n ƒë√£ ƒëƒÉng k√Ω l·ªõp n√†o kh√°c cho c√πng subject_id trong kho·∫£ng th·ªùi gian ƒëƒÉng k√Ω
        Long subjectId = classStudent.getTeachingScheduleRequest().getAssignment().getSubject().getSubjectId();
        boolean subjectExistsInPeriod = classSubjectRepo.existsByStudent_UserIdAndClassStudent_TeachingScheduleRequest_Assignment_Subject_SubjectIdAndRegistrationTimeBetween(
                student.getUserId(), subjectId, currentPeriod.getStartDate(), currentPeriod.getEndDate());
        if (subjectExistsInPeriod) {
            throw new IllegalStateException(String.format(
                    "Sinh vi√™n ƒë√£ ƒëƒÉng k√Ω m·ªôt l·ªõp h·ªçc kh√°c cho m√¥n h·ªçc (subject_id: %d) trong kho·∫£ng th·ªùi gian n√†y (%s ƒë·∫øn %s).",
                    subjectId, currentPeriod.getStartDate(), currentPeriod.getEndDate()
            ));
        }

        // Ghi danh
        ClassSubjectStudent css = new ClassSubjectStudent();
        css.setClassStudent(classStudent);
        css.setStudent(student);
        css.setStatus(dto.getStatus());
        css.setRegistrationTime(now); // L∆∞u th·ªùi gian ƒëƒÉng k√Ω
        classSubjectRepo.save(css);

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng sinh vi√™n ƒë√£ ƒëƒÉng k√Ω
        long count = classSubjectRepo.countByClassStudent_ClassStudentId(dto.getClassStudentId());

        if (count >= 6 && !"success".equalsIgnoreCase(classStudent.getStatus())) {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªõp
            classStudent.setStatus("success");
            classStudentRepo.save(classStudent);

            // L·∫•y l·ªãch gi·∫£ng d·∫°y
            TeachingScheduleRequest schedule = classStudent.getTeachingScheduleRequest();
            if (schedule == null || schedule.getScheduleDetails() == null || schedule.getScheduleDetails().isEmpty()) {
                throw new IllegalStateException("Kh√¥ng c√≥ l·ªãch gi·∫£ng d·∫°y ƒë·ªÉ t·∫°o phi√™n h·ªçc.");
            }

            // Sinh c√°c bu·ªïi h·ªçc theo tu·∫ßn t·ª´ m·ªói scheduleDetail
            for (TeachingScheduleRequest.ScheduleDetail detail : schedule.getScheduleDetails()) {
                try {
                    LocalDateTime start = LocalDateTime.parse(detail.getDateTime());
                    LocalDateTime end = LocalDateTime.parse(detail.getEndDate());

                    LocalDateTime current = start;
                    while (!current.isAfter(end)) {
                        AttendanceSession session = new AttendanceSession();
                        session.setClassStudent(classStudent);
                        session.setScheduledDate(current);
                        session.setStatus("created");
                        attendanceSessionRepo.save(session);

                        current = current.plusWeeks(1);
                    }
                } catch (Exception e) {
                    throw new RuntimeException("L·ªói khi x·ª≠ l√Ω ng√†y th√°ng cho ti·∫øt h·ªçc: " + e.getMessage());
                }
            }
        }

        return new ClassSubjectStudentDTO(css);
    }


//    @Override
//    @Transactional
//    public ClassSubjectStudentDTO registerStudentToClass(RegisterClassRequestDTO dto) {
//        LocalDateTime now = LocalDateTime.now();
//
//        StudentRegistrationPeriod currentPeriod = studentRegistrationPeriodRepository.findActivePeriod(now)
//                .orElseThrow(() -> new IllegalStateException("Hi·ªán t·∫°i kh√¥ng c√≥ ƒë·ª£t ƒëƒÉng k√Ω sinh vi√™n n√†o ƒëang m·ªü"));
//
//        boolean isInRegistrationPeriod = !now.isBefore(currentPeriod.getStartDate()) && !now.isAfter(currentPeriod.getEndDate());
//
//        UsernamePasswordAuthenticationToken authentication =
//                (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();
//
//        if (authentication == null || !(authentication.getPrincipal() instanceof User)) {
//            throw new RuntimeException("Ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c ho·∫∑c token kh√¥ng h·ª£p l·ªá.");
//        }
//
//        User currentUser = (User) authentication.getPrincipal();
//
//        Student student = studentRepository.findById(currentUser.getUserId())
//                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y sinh vi√™n."));
//
//        ClassStudent classStudent = classStudentRepo.findById(dto.getClassStudentId())
//                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc."));
//
//        boolean exists = classSubjectRepo.existsByClassStudent_ClassStudentIdAndStudent_UserId(
//                dto.getClassStudentId(), student.getUserId());
//        if (exists) {
//            throw new IllegalStateException("Sinh vi√™n ƒë√£ ƒëƒÉng k√Ω l·ªõp h·ªçc n√†y r·ªìi.");
//        }
//
//        // Ghi danh v·ªõi tr·∫°ng th√°i lu√¥n l√† pending
//        ClassSubjectStudent css = new ClassSubjectStudent();
//        css.setClassStudent(classStudent);
//        css.setStudent(student);
//        css.setStatus("pending");
//        classSubjectRepo.save(css);
//
//        if (now.isAfter(currentPeriod.getEndDate())) {
//            // L·∫•y danh s√°ch sinh vi√™n c√≥ status = "pending"
//            List<ClassSubjectStudent> pendingStudents =
//                    classSubjectRepo.findByClassStudent_ClassStudentIdAndStatus(dto.getClassStudentId(), "pending");
//
//            // N·∫øu c√≥ ƒë·ªß ‚â• 6 ng∆∞·ªùi pending th√¨ m·ªü l·ªõp, b·∫•t k·ªÉ c√≥ ai reject hay kh√¥ng
//            if (pendingStudents.size() >= 6) {
//                classStudent.setStatus("success");
//                classStudentRepo.save(classStudent);
//
//                for (ClassSubjectStudent studentItem : pendingStudents) {
//                    studentItem.setStatus("success");
//                }
//                classSubjectRepo.saveAll(pendingStudents);
//
//                // Sinh bu·ªïi h·ªçc
//                TeachingScheduleRequest schedule = classStudent.getTeachingScheduleRequest();
//                if (schedule == null || schedule.getScheduleDetails() == null || schedule.getScheduleDetails().isEmpty()) {
//                    throw new IllegalStateException("Kh√¥ng c√≥ l·ªãch gi·∫£ng d·∫°y ƒë·ªÉ t·∫°o phi√™n h·ªçc.");
//                }
//
//                for (TeachingScheduleRequest.ScheduleDetail detail : schedule.getScheduleDetails()) {
//                    LocalDateTime start = LocalDateTime.parse(detail.getDateTime());
//                    LocalDateTime end = LocalDateTime.parse(detail.getEndDate());
//
//                    LocalDateTime current = start;
//                    while (!current.isAfter(end)) {
//                        AttendanceSession session = new AttendanceSession();
//                        session.setClassStudent(classStudent);
//                        session.setScheduledDate(current);
//                        session.setStatus("created");
//                        attendanceSessionRepo.save(session);
//                        current = current.plusWeeks(1);
//                    }
//                }
//            } else {
//                // Kh√¥ng ƒë·ªß ng∆∞·ªùi ‚Üí cancel l·ªõp
//                classStudent.setStatus("cancel");
//                classStudentRepo.save(classStudent);
//
//                for (ClassSubjectStudent studentItem : pendingStudents) {
//                    studentItem.setStatus("cancel");
//                }
//                classSubjectRepo.saveAll(pendingStudents);
//            }
//        }
//
//        return new ClassSubjectStudentDTO(css);
//    }





    @Override
    public List<RegisteredClassDTO> getRegisteredClasses(Long userId) {
        return classSubjectRepo.findRegisteredClassesByUserId(userId).stream().map(css -> {
            var cs = css.getClassStudent();
            var tsr = cs.getTeachingScheduleRequest();
            var assignment = tsr.getAssignment();
            var subject = assignment.getSubject();
            var termClass = assignment.getTermClass();
            var classroom = tsr.getClassroom();

            return new RegisteredClassDTO(
                    css.getClassSubjectStudentId(),
                    css.getStatus(),
                    cs.getClassStudentId(),
                    cs.getStatus(),
                    cs.getCreatedAt(),
                    cs.getEndDate(),
                    cs.getMaterials(),
                    tsr.getScheduleId(),
                    tsr.getClassType(),
                    tsr.getLesson(),
                    tsr.getStartDate(),
                    tsr.getEndDate(),
                    tsr.getDateTime(),
                    tsr.getStatus(),
                    tsr.getScheduleDetails(),
                    tsr.getMaterials(),
                    assignment.getAssignmentId(),
                    assignment.getAssignmentType() != null ? assignment.getAssignmentType().name() : null,
                    subject.getSubjectId(),
                    subject.getSubjectName(),
                    subject.getSubjectDescription(),
                    subject.getLtCredits(),
                    subject.getThCredits(),
                    subject.getSubjectCoefficient(),
                    termClass.getTermclassId(),
                    termClass.getClassname(),
                    termClass.getSchoolyears(),
                    termClass.getSemester(),
                    termClass.getProgress(),
                    classroom.getClassroomId(),
                    classroom.getClassroomName(),
                    classroom.getNumberOfSeats() != null ? classroom.getNumberOfSeats().intValue() : null,
                    classroom.getDevice(),
                    classroom.getStatus()
            );
        }).collect(Collectors.toList());
    }



    @Override
    @Transactional
    public void unregisterStudentFromClass(UnregisterClassRequestDTO dto) {
        LocalDateTime now = LocalDateTime.now();
        StudentRegistrationPeriod currentPeriod = studentRegistrationPeriodRepository.findActivePeriod(now)
                .orElseThrow(() -> new IllegalStateException("Hi·ªán t·∫°i kh√¥ng c√≥ ƒë·ª£t ƒëƒÉng k√Ω sinh vi√™n n√†o ƒëang m·ªü"));

        if (now.isBefore(currentPeriod.getStartDate()) || now.isAfter(currentPeriod.getEndDate())) {
            throw new IllegalStateException(String.format(
                    "Hu·ª∑ ƒëƒÉng k√Ω l·ªõp ch·ªâ ƒë∆∞·ª£c th·ª±c hi·ªán trong kho·∫£ng t·ª´ %s ƒë·∫øn %s",
                    currentPeriod.getStartDate(), currentPeriod.getEndDate()
            ));
        }

        UsernamePasswordAuthenticationToken authentication =
                (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();

        if (authentication == null || !(authentication.getPrincipal() instanceof User)) {
            throw new RuntimeException("Ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c ho·∫∑c token kh√¥ng h·ª£p l·ªá.");
        }

        User currentUser = (User) authentication.getPrincipal();

        ClassSubjectStudent css = classSubjectRepo.findById(dto.getClassSubjectStudentId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒëƒÉng k√Ω l·ªõp h·ªçc."));

        if (!css.getStudent().getUserId().equals(currentUser.getUserId())) {
            throw new SecurityException("Kh√¥ng c√≥ quy·ªÅn hu·ª∑ ƒëƒÉng k√Ω l·ªõp h·ªçc n√†y.");
        }

        classSubjectRepo.delete(css);
    }

//    @Override
//    @Transactional
//    public ClassSubjectStudentDTO unregisterStudentFromClass(UnregisterClassRequestDTO dto) {
//        LocalDateTime now = LocalDateTime.now();
//        StudentRegistrationPeriod currentPeriod = studentRegistrationPeriodRepository.findActivePeriod(now)
//                .orElseThrow(() -> new IllegalStateException("Hi·ªán t·∫°i kh√¥ng c√≥ ƒë·ª£t ƒëƒÉng k√Ω sinh vi√™n n√†o ƒëang m·ªü"));
//
//        UsernamePasswordAuthenticationToken authentication =
//                (UsernamePasswordAuthenticationToken) SecurityContextHolder.getContext().getAuthentication();
//
//        if (authentication == null || !(authentication.getPrincipal() instanceof User)) {
//            throw new RuntimeException("Ng∆∞·ªùi d√πng ch∆∞a x√°c th·ª±c ho·∫∑c token kh√¥ng h·ª£p l·ªá.");
//        }
//
//        User currentUser = (User) authentication.getPrincipal();
//
//        Student student = studentRepository.findById(currentUser.getUserId())
//                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y sinh vi√™n."));
//
//        // T√¨m b·∫£n ghi ƒëƒÉng k√Ω l·ªõp h·ªçc (class_subject_student) d·ª±a v√†o classStudentId + userId
//        ClassSubjectStudent css = classSubjectRepo.findByClassStudent_ClassStudentIdAndStudent_UserId(
//                dto.getClassStudentId(), student.getUserId()
//        ).orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒëƒÉng k√Ω l·ªõp h·ªçc."));
//
//        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "reject"
//        css.setStatus("reject");
//        classSubjectRepo.save(css);
//
//        return new ClassSubjectStudentDTO(css);
//    }





    @Override
    @Transactional
    public void markAttendance(Long sessionId, Long classStudentId, String status, String note) {
        Attendance attendance = attendanceRepo.findAll().stream()
                .filter(a -> a.getAttendanceSession().getSessionId().equals(sessionId)
                        && a.getClassStudent().getClassStudentId().equals(classStudentId))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b·∫£n ghi ƒëi·ªÉm danh."));

        attendance.setStatus(status);
        attendance.setNote(note);
        attendanceRepo.save(attendance);
    }

}
